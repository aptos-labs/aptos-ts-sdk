// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

import {
  Account,
  Aptos,
  UserTransactionResponse,
  TypeTag,
  EntryFunctionArgumentTypes,
  HexInput,
  InputGenerateTransactionData,
  InputViewFunctionData,
  SimpleEntryFunctionArgumentTypes,
  MoveVector,
  AnyRawTransaction,
  isUserTransactionResponse,
  Ed25519PrivateKey,
  EphemeralKeyPair,
  generateTransactionPayload,
  InputEntryFunctionData,
} from "../../../src";
import { FUND_AMOUNT, TRANSFER_AMOUNT } from "../../unit/helper";
import { getAptosClient } from "../helper";

export const EPHEMERAL_KEY_PAIR = new EphemeralKeyPair({
  privateKey: new Ed25519PrivateKey("ed25519-priv-0x1111111111111111111111111111111111111111111111111111111111111111"),
  expiryDateSecs: 1735475012, // Expires Sunday, December 29, 2024 12:23:32 PM GMT
  blinder: new Uint8Array(31),
});

export async function publishPackage(
  aptos: Aptos,
  senderAccount: Account,
  metadataBytes: HexInput,
  codeBytes: Array<HexInput>,
) {
  const rawTransaction = await aptos.publishPackageTransaction({
    account: senderAccount.accountAddress,
    metadataBytes,
    moduleBytecode: codeBytes,
  });
  const signedTxn = await aptos.transaction.sign({
    signer: senderAccount,
    transaction: rawTransaction,
  });
  const txnHash = await aptos.transaction.submit.simple({
    transaction: rawTransaction,
    senderAuthenticator: signedTxn,
  });

  const response = await aptos.waitForTransaction({
    transactionHash: txnHash.hash,
  });

  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }

  return response;
}

// Instead of funding each account individually, we fund one twice, then send coins from it to the rest
// This results in 2 fund requests and 1 transaction instead of N fund requests. For running tests,
// this saves 10-15 seconds each run.
export async function fundAccounts(aptos: Aptos, accounts: Array<Account>) {
  // Fund first account
  const firstAccount = accounts[0];
  // Fund the first account twice to make sure it has enough coins to send to the rest
  await aptos.fundAccount({ accountAddress: firstAccount.accountAddress, amount: FUND_AMOUNT });
  await aptos.fundAccount({ accountAddress: firstAccount.accountAddress, amount: FUND_AMOUNT });
  // Get the addresses for `accounts[1..n]`
  const addressesRemaining = accounts.slice(1).map((account) => account.accountAddress);
  const amountToSend = Math.floor((FUND_AMOUNT * 2) / accounts.length);
  // Send coins from `account[0]` to `account[1..n]`
  const transaction = await aptos.transaction.build.simple({
    sender: firstAccount.accountAddress,
    data: {
      function: "0x1::aptos_account::batch_transfer",
      functionArguments: [
        new MoveVector(addressesRemaining),
        MoveVector.U64(addressesRemaining.map(() => amountToSend)),
      ],
    },
  });
  const signedTxn = await aptos.transaction.sign({
    signer: firstAccount,
    transaction,
  });
  const transactionResponse = await aptos.transaction.submit.simple({
    transaction,
    senderAuthenticator: signedTxn,
  });
  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }
  return response;
}

export async function createAndFundMultisigAccount(owner: Account) {
  const { aptos } = getAptosClient();
  const payload: InputViewFunctionData = {
    function: "0x1::multisig_account::get_next_multisig_account_address",
    functionArguments: [owner.accountAddress.toString()],
  };
  const [multisigAddress] = await aptos.view<[string]>({ payload });
  const createMultisig = await aptos.transaction.build.simple({
    sender: owner.accountAddress,
    data: {
      function: "0x1::multisig_account::create",
      functionArguments: [1, [], []],
    },
  });
  const ownerAuthenticator = aptos.transaction.sign({ signer: owner, transaction: createMultisig });
  const res = await aptos.transaction.submit.simple({
    senderAuthenticator: ownerAuthenticator,
    transaction: createMultisig,
  });
  await aptos.waitForTransaction({ transactionHash: res.hash });
  await aptos.fundAccount({ accountAddress: multisigAddress, amount: FUND_AMOUNT });
  return multisigAddress;
}

export async function createMultisigTransaction(
  owner: Account,
  multisigAddress: string,
  multisigEntryFunction: InputEntryFunctionData,
) {
  const { aptos, config } = getAptosClient();
  const transactionPayload = await generateTransactionPayload({
    multisigAddress,
    function: multisigEntryFunction.function,
    functionArguments: multisigEntryFunction.functionArguments,
    aptosConfig: config,
  });
  const createMultisigTx = await aptos.transaction.build.simple({
    sender: owner.accountAddress,
    data: {
      function: "0x1::multisig_account::create_transaction",
      functionArguments: [multisigAddress, transactionPayload.multiSig.transaction_payload!.bcsToBytes()],
    },
  });

  const createMultisigTxAuthenticator = aptos.transaction.sign({ signer: owner, transaction: createMultisigTx });

  const createMultisigTxResponse = await aptos.transaction.submit.simple({
    senderAuthenticator: createMultisigTxAuthenticator,
    transaction: createMultisigTx,
  });
  await aptos.waitForTransaction({ transactionHash: createMultisigTxResponse.hash });
}

export async function simpleCoinTransactionHeler(aptos: Aptos, sender: Account, recipient: Account) {
  const senderFundTxn = await aptos.fundAccount({
    accountAddress: sender.accountAddress,
    amount: FUND_AMOUNT,
  });
  const recipientFundTxn = await aptos.fundAccount({
    accountAddress: recipient.accountAddress,
    amount: FUND_AMOUNT,
  });

  const senderOldBalance = await aptos.getAccountAPTAmount({
    accountAddress: sender.accountAddress,
    minimumLedgerVersion: Number(senderFundTxn.version),
  });
  const recipientOldBalance = await aptos.getAccountAPTAmount({
    accountAddress: recipient.accountAddress,
    minimumLedgerVersion: Number(recipientFundTxn.version),
  });

  const transaction = await aptos.transferCoinTransaction({
    sender: sender.accountAddress,
    recipient: recipient.accountAddress,
    amount: TRANSFER_AMOUNT,
  });

  const pendingTxn = await aptos.signAndSubmitTransaction({ signer: sender, transaction });
  const committedTxn = await aptos.waitForTransaction({ transactionHash: pendingTxn.hash });
  const version = Number(committedTxn.version);

  const senderNewBalance = await aptos.getAccountAPTAmount({
    accountAddress: sender.accountAddress,
    minimumLedgerVersion: version,
  });
  const recipientNewBalance = await aptos.getAccountAPTAmount({
    accountAddress: recipient.accountAddress,
    minimumLedgerVersion: version,
  });

  expect(senderOldBalance - senderNewBalance).toBeGreaterThan(TRANSFER_AMOUNT);
  expect(recipientNewBalance - recipientOldBalance).toEqual(TRANSFER_AMOUNT);
}

// Transaction builder helpers
// single signer
export async function rawTransactionHelper(
  aptos: Aptos,
  senderAccount: Account,
  functionName: string,
  typeArgs: TypeTag[],
  args: Array<EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes>,
): Promise<UserTransactionResponse> {
  const rawTransaction = await aptos.transaction.build.simple({
    sender: senderAccount.accountAddress,
    data: {
      function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
      typeArguments: typeArgs,
      functionArguments: args,
    },
  });
  const senderAuthenticator = await aptos.transaction.sign({
    signer: senderAccount,
    transaction: rawTransaction,
  });
  const transactionResponse = await aptos.transaction.submit.simple({
    transaction: rawTransaction,
    senderAuthenticator,
  });
  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }
  return response;
}

// multi agent/fee payer
export const rawTransactionMultiAgentHelper = async (
  aptos: Aptos,
  senderAccount: Account,
  functionName: string,
  typeArgs: Array<TypeTag>,
  args: Array<EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes>,
  secondarySignerAccounts: Array<Account>,
  feePayerAccount?: Account,
): Promise<UserTransactionResponse> => {
  let transactionData: InputGenerateTransactionData;
  let generatedTransaction: AnyRawTransaction;
  // Fee payer
  if (feePayerAccount) {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
      secondarySignerAddresses: secondarySignerAccounts?.map((account) => account.accountAddress.data),
      withFeePayer: true,
    };
    generatedTransaction = await aptos.transaction.build.multiAgent(transactionData);
  } else if (secondarySignerAccounts) {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
      secondarySignerAddresses: secondarySignerAccounts?.map((account) => account.accountAddress.data),
    };
    generatedTransaction = await aptos.transaction.build.multiAgent(transactionData);
  } else {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
    };
    generatedTransaction = await aptos.transaction.build.simple(transactionData);
  }

  const senderAuthenticator = aptos.transaction.sign({
    signer: senderAccount,
    transaction: generatedTransaction,
  });

  const secondaryAuthenticators = secondarySignerAccounts.map((account) =>
    aptos.transaction.sign({
      signer: account,
      transaction: generatedTransaction,
    }),
  );

  let feePayerAuthenticator;
  let transactionResponse;
  if (feePayerAccount !== undefined) {
    feePayerAuthenticator = aptos.transaction.signAsFeePayer({
      signer: feePayerAccount,
      transaction: generatedTransaction,
    });
    transactionResponse = await aptos.transaction.submit.multiAgent({
      transaction: generatedTransaction,
      senderAuthenticator,
      additionalSignersAuthenticators: secondaryAuthenticators,
      feePayerAuthenticator,
    });
  } else {
    transactionResponse = await aptos.transaction.submit.multiAgent({
      transaction: generatedTransaction,
      senderAuthenticator,
      additionalSignersAuthenticators: secondaryAuthenticators,
    });
  }

  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }
  return response;
};

export const PUBLISHER_ACCOUNT_PK = "ed25519-priv-0xc694948143dea59c195a4918d7fe06c2329624318a073b95f6078ce54940dae9";
export const PUBLISHER_ACCOUNT_ADDRESS = "2cca48b8b0d7f77ef28bfd608883c599680c5b8db8192c5e3baaae1aee45114c";

// script function byte code form `transfer/sources/script_coin_transfer.move`
export const TYPED_SCRIPT_TEST =
  // eslint-disable-next-line max-len
  "a11ceb0b060000000701000202020603080c04140405181a07321b084d2000000001040100010002030101000003040501000002010203060c0305010b0001090001090002060c0302050b000109000004636f696e04436f696e087769746864726177076465706f736974000000000000000000000000000000000000000000000000000000000000000101000001080b000b0138000c030b020b03380102";

// script function byte code from `arguments/sources/script.move` for the transaction_arguments.test.ts script function tests
export const MULTI_SIGNER_SCRIPT_ARGUMENT_TEST =
  // eslint-disable-next-line max-len
  `a11ceb0b060000000601000802080e03160a05203907596408bd0140000000010002010302040700000507010001030608000107020300030804010015060c060c060c060c060c050505050501020d0e03040f0508000b010108020a020001060c01050b01020d0e03040f0508000b010108020a02066f626a656374067369676e657206737472696e670e74785f617267735f6d6f64756c6506537472696e67064f626a6563740d456d7074795265736f757263650a616464726573735f6f66186173736572745f76616c7565735f666f725f7363726970740000000000000000000000000000000000000000000000000000000000000001${PUBLISHER_ACCOUNT_ADDRESS}000001490b0011000b0521040605100b04010b03010b02010b0101066400000000000000270b0111000b06210416051e0b04010b03010b0201066500000000000000270b0211000b07210424052a0b04010b0301066600000000000000270b0311000b0821043005340b0401066700000000000000270b0411000b0921043a053c066800000000000000270b0a0b0b0b0c0b0d0b0e0b0f0b100b110b120b130b14110102${PUBLISHER_ACCOUNT_ADDRESS}000001490b0011000b0521040605100b04010b03010b02010b0101066400000000000000270b0111000b06210416051e0b04010b03010b0201066500000000000000270b0211000b07210424052a0b04010b0301066600000000000000270b0311000b0821043005340b0401066700000000000000270b0411000b0921043a053c066800000000000000270b0a0b0b0b0c0b0d0b0e0b0f0b100b110b120b130b14110102${PUBLISHER_ACCOUNT_ADDRESS}000001150b0011000b012104060508066400000000000000270b020b030b040b050b060b070b080b090b0a0b0b0b0c110102`;

// hard-coded bytecode for the contract, so we don't have to recompile it every time in ci
export const ARGUMENT_TESTS_CONTRACT_METADATA =
  // eslint-disable-next-line max-len
  "";

// interpolate a named address into the contract bytecode
export async function getContractBytecode() {
  // eslint-disable-next-line max-len
  return `0xa11ceb0b060000000c01001002101c032cc00104ec018e0205fa03990b07930ff704088a144006ca14aa0710f41b82020af61d1a0c901efb340d8b5306000001010102010301040105010601070008080000090800050a0700020b07010001030d0701000002280200000c000100000e020100000f0103000010010400001101050000120601000013070100001408010000150701000016080100001701011f000000000000000000000000000000000000000000000000000000000000000018090105020202020800190a0a00051e0c0d00011f0f0f0007201001010003211213010003221617010003231617010003241618010003251917010003261a12010002271d1e01080429061e00022a1e2200022b232400022c23250108032d01130100062e010d01000f0e10030f0c0f030f0d0f14110312031303140315030f15161c1a1c0f210f170f270f280f0f0f290f2a0f1e1b0e110e120e130e140e10171117121713171417100e1027112712271327142710281128122813281428100f110f120f130f140f10291129122913291429102a112a122a132a142a101e111e121e131e141e100d110d120d130d140d102111211221132114211c121c171c2d1c0e1c2e1c271c2f1c281c301c0f1c311c291c321c2a1c331c1e1c341c0d1c351c211c361c371c381c0c1c391c3a1c3b1c3c1c3d1c3e1c3f1c401c411c421c431c441c451c031c461c471c481c491c4a1c4b1c4c1c4d1c4e1c4f1c501c511c521c531c541c551c561c571c581c591c5a1c5b1c5c1c5d0b01020d0e03040f0508020b030108000a0200040a0a020a0a08020a0b04010a08020a0a0b04010a0802010a080203050505030b030108000b030108000b0301080001060c21060c01020d0e03040f0508020b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b0301080026060c0c060c0c060c0a0501020d0e03040f0508020b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b030108000509000901090209030b030109042001020d0e03040f0508020b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b0301080009030b03010800030a020a020a020a020a020a02010a020108020102010301070a0900530b04010a08020b04010a080203030303030303030b04010a08020b04010a08020a0a08020a0b04010a08020a0a0b04010a0802060a0802060a08020303030303030303030b04010a08020b04010a08020b04010a08020b04010a08020a08020a08020a08020a08020b04010a08020a0a0b04010a08020a0a020a020a020a0a020a0a08020a08020a08020a0a08020a0b04010a08020a08020a08020a0b04010a08020a0a0b04010a08020a0b04010a08020a08020a08020a0b04010a08020a0a0b04010a08020a0a020a020a020a0a020a0a08020a08020a08020a0a08020a0b04010a08020a08020a08020a0b04010a08020a0a0b04010a08020a0b04010a08020a08020a08020a0b04010a08020a0a020a020a0a08020a08020a08020a08020a0a020a020a0a08020a08020a08020a0802010900010b04010900010b04010a0802010a0b04010a080201060b0401090001010106090002060b0401090006090001070b0401090007070a08020a02030a08020a020a0a020a0a0201080001060b03010900010501060801060805030b030108000c0a0b030108000801010b0301080001080501060805010c010b0301090089010a0b0301080003030303030303030303030303030303030303030303060206010602060d060e06030604060f0605060802060b030108000b0301080003030303030303030303030b030108000b030108000b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b030108000b0401020b0401010b0401020b04010d0b04010e0b0401030b0401040b04010f0b0401050b040108020b04010b030108000a020a020a010a010a020a020a0d0a0d0a0e0a0e0a030a030a040a040a0f0a0f0a050a050a08020a08020a0b030108000a0b030108000a020a020a010a010a020a020a0d0a0d0a0e0a0e0a030a030a040a040a0f0a0f0a050a050a08020a08020a0b030108000a0b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b030108000a020a010a020a0d0a0e0a030a040a0f0a050a08020a0b03010800010d010e0104010f0903030a050a050a050a050a050a050a051e01010101010101010101010101010101010101010101010101010101010101090101090201090301090401090501090601090701090801090901090a010a0101090b01090c010a0d01090d010a0e01090e010a0301090f010a04010910010a0f010911010a05010912010913010a0b03010800010914010b040101010915010b040102010916010b04010d010917010b04010e010918010b040103010919010b04010401091a010b04010f01091b010b04010501091c010b0401080201091d010b04010b0301080001091e010a0a0b04010a0b04010b030108000e74785f617267735f6d6f64756c65056572726f72066f626a656374066f7074696f6e067369676e657206737472696e6709747970655f696e666f06766563746f720d456d7074795265736f757263650953657475704461746106537472696e67064f626a656374186173736572745f76616c7565735f666f725f736372697074064f7074696f6e11636f6d706c65785f617267756d656e74731a6765745f65787065637465645f766563746f725f737472696e67196765745f746573745f6f626a6563745f616464726573736573106765745f746573745f6f626a656374730b696e69745f6d6f64756c6511707269766174655f617267756d656e747322707269766174655f617267756d656e74735f6d756c7469706c655f7369676e657273107075626c69635f617267756d656e7473217075626c69635f617267756d656e74735f6d756c7469706c655f7369676e65727309747970655f7461677312747970655f746167735f666f725f6172677312766965775f616c6c5f617267756d656e74730b64756d6d795f6669656c640e656d7074795f6f626a6563745f310e656d7074795f6f626a6563745f320e656d7074795f6f626a6563745f3304757466380d696e76616c69645f7374617465077265766572736504736f6d650769735f6e6f6e650769735f736f6d6506626f72726f7708636f6e7461696e7307657874726163740e6f626a6563745f616464726573730e436f6e7374727563746f725265660a616464726573735f6f660d6372656174655f6f626a6563740f67656e65726174655f7369676e65721b6f626a6563745f66726f6d5f636f6e7374727563746f725f726566046e6f6e6509747970655f6e616d65${PUBLISHER_ACCOUNT_ADDRESS}00000000000000000000000000000000000000000000000000000000000000010308d007000000000000030810270000000000000308611e0000000000000520${PUBLISHER_ACCOUNT_ADDRESS}`;
}

export async function publishArgumentTestModule(
  aptos: Aptos,
  senderAccount: Account,
): Promise<UserTransactionResponse> {
  const contractBytecode = await getContractBytecode();
  const response = await publishPackage(aptos, senderAccount, ARGUMENT_TESTS_CONTRACT_METADATA, [contractBytecode]);
  return response;
}

export const singleSignerScriptBytecode =
  // eslint-disable-next-line max-len
  "a11ceb0b060000000701000402040a030e0c041a04051e20073e30086e2000000001010204010001000308000104030401000105050601000002010203060c0305010b0001080101080102060c03010b0001090002050b00010900000a6170746f735f636f696e04636f696e04436f696e094170746f73436f696e087769746864726177076465706f7369740000000000000000000000000000000000000000000000000000000000000001000001080b000b0138000c030b020b03380102";

export const multiSignerScriptBytecode =
  // eslint-disable-next-line max-len
  "a11ceb0b060000000701000402040a030e18042608052e4307713e08af01200000000101020401000100030800010403040100010505060100010607040100010708060100000201020202030207060c060c0303050503030b000108010b000108010b0001080101080102060c03010b0001090002070b000109000b000109000002070b000109000302050b000109000a6170746f735f636f696e04636f696e04436f696e094170746f73436f696e087769746864726177056d657267650765787472616374076465706f73697400000000000000000000000000000000000000000000000000000000000000010000011a0b000a0238000c070b010a0338000c080d070b0838010d070b020b03160b061738020c090b040b0738030b050b09380302";

export async function publishTransferPackage(aptos: Aptos, senderAccount: Account) {
  await publishPackage(
    aptos,
    senderAccount,
    // eslint-disable-next-line max-len
    "107472616e73616374696f6e5f746573740100000000000000004035364643333939394442364244363842383430304539323438363839393837413338313439344644413241343631334144373946333630323134353539324545ba011f8b08000000000002ff5d8f3d0ec2300c85779f0265e944032b12030b97a8aaca4d4c1b95fc284e0bc72729a503f2e2a7f7d97e6e02aa09076ac1a1a5c3f5205244c7a892f1ae4bc449c04291b32ae6a9ce25001a4d819c26a70c717d0bc9f33de6052f1fa7160693325c8d2905be4899e538f7b5f25662218f4fec796b958f5467a082484b19b2685c053cf7dac4a2bf98f50bc9c7efc236bbeb2a0742ad233113b7b0baddeeaeb9df6701ff9f15a3131fec1509190201000001087472616e73666572ca021f8b08000000000002ff9552cb4ec33010bcf72bf654a522dc10071790101f12b9f1a6582476e407a142fd77fc48d23826125891627b661fb39e4e32db22184585a6b5e1525406b52124dc34a8e07b07e03eab11686fa4ae1a453b1ca4fa20245ed4928be33629c03b87f6f6d4f21a50187581c60a3083ac4e97cafd0a07c7d570e5cac35ef3b34055cef71a6b29d82f00eda415a61ae3ece343064da109c6f41c431953a8758a4d413988bdd43c2f780893f2ab45035e74a4c07338103270f3ce141d9e6e5323e4d5efdfdcf6a508ec32d17338ae53c6b6fe9c33d2cb741287f01a7e457e87ea8cc5beb3cbb6cb65bd5bc45623f8e50c539b3ccb520edca58dc07d3acd75632358cc6f552e52cfb3c9b993ea5481e75e6381dc89a3db8b85df0443b5e9b7959b14d61c3f3d3ff14bee897fbc9caf3fcd6f43ec54364a9d355e7f00fb8d2dcfd603000000000300000000000000000000000000000000000000000000000000000000000000010e4170746f734672616d65776f726b00000000000000000000000000000000000000000000000000000000000000010b4170746f735374646c696200000000000000000000000000000000000000000000000000000000000000010a4d6f76655374646c696200",
    [
      // eslint-disable-next-line max-len
      `a11ceb0b060000000801000602060a031022043208053a4e0788015208da01400c9a024c000001010102020404010001010508000000000100000302010002060506010002070701010002080901010002090a060100020403040404050403060c03050007060c060c0303050503010b0001080101080102060c03010b0001090002050b00010900030b000108010b000108010b0001080102070b000109000b0001090002070b0001090003087472616e736665720a6170746f735f636f696e04636f696e0a74776f5f62795f74776f04436f696e094170746f73436f696e087769746864726177076465706f736974056d657267650765787472616374${senderAccount.accountAddress.toStringWithoutPrefix()}00000000000000000000000000000000000000000000000000000000000000010001040003080b000b0138000c030b020b0338010201010400081a0b000a0238000c070b010a0338000c080d070b0838020d070b020b03160b061738030c090b040b0738010b050b0938010200`,
    ],
  );
}
