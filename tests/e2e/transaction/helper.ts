// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

import {
  Account,
  Aptos,
  UserTransactionResponse,
  TypeTag,
  EntryFunctionArgumentTypes,
  HexInput,
  InputGenerateTransactionData,
  InputViewFunctionData,
  SimpleEntryFunctionArgumentTypes,
  MoveVector,
  AnyRawTransaction,
  isUserTransactionResponse,
  Ed25519PrivateKey,
  EphemeralKeyPair,
  generateTransactionPayload,
  InputEntryFunctionData,
} from "../../../src";
import { FUND_AMOUNT, TRANSFER_AMOUNT } from "../../unit/helper";
import { getAptosClient } from "../helper";

export const EPHEMERAL_KEY_PAIR = new EphemeralKeyPair({
  privateKey: new Ed25519PrivateKey("ed25519-priv-0x1111111111111111111111111111111111111111111111111111111111111111"),
  expiryDateSecs: 9876543210, // Expires Friday, December 22, 2282 8:13:30 PM GMT
  blinder: new Uint8Array(31),
});

export async function publishPackage(
  aptos: Aptos,
  senderAccount: Account,
  metadataBytes: HexInput,
  codeBytes: Array<HexInput>,
) {
  const rawTransaction = await aptos.publishPackageTransaction({
    account: senderAccount.accountAddress,
    metadataBytes,
    moduleBytecode: codeBytes,
  });
  const signedTxn = await aptos.transaction.sign({
    signer: senderAccount,
    transaction: rawTransaction,
  });
  const txnHash = await aptos.transaction.submit.simple({
    transaction: rawTransaction,
    senderAuthenticator: signedTxn,
  });

  const response = await aptos.waitForTransaction({
    transactionHash: txnHash.hash,
  });

  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }

  return response;
}

// Instead of funding each account individually, we fund one twice, then send coins from it to the rest
// This results in 2 fund requests and 1 transaction instead of N fund requests. For running tests,
// this saves 10-15 seconds each run.
export async function fundAccounts(aptos: Aptos, accounts: Array<Account>) {
  // Fund first account
  const firstAccount = accounts[0];
  // Fund the first account twice to make sure it has enough coins to send to the rest
  await aptos.fundAccount({ accountAddress: firstAccount.accountAddress, amount: FUND_AMOUNT });
  await aptos.fundAccount({ accountAddress: firstAccount.accountAddress, amount: FUND_AMOUNT });
  // Get the addresses for `accounts[1..n]`
  const addressesRemaining = accounts.slice(1).map((account) => account.accountAddress);
  const amountToSend = Math.floor((FUND_AMOUNT * 2) / accounts.length);
  // Send coins from `account[0]` to `account[1..n]`
  const transaction = await aptos.transaction.build.simple({
    sender: firstAccount.accountAddress,
    data: {
      function: "0x1::aptos_account::batch_transfer",
      functionArguments: [
        new MoveVector(addressesRemaining),
        MoveVector.U64(addressesRemaining.map(() => amountToSend)),
      ],
    },
  });
  const signedTxn = await aptos.transaction.sign({
    signer: firstAccount,
    transaction,
  });
  const transactionResponse = await aptos.transaction.submit.simple({
    transaction,
    senderAuthenticator: signedTxn,
  });
  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }
  return response;
}

export async function createAndFundMultisigAccount(owner: Account) {
  const { aptos } = getAptosClient();
  const payload: InputViewFunctionData = {
    function: "0x1::multisig_account::get_next_multisig_account_address",
    functionArguments: [owner.accountAddress.toString()],
  };
  const [multisigAddress] = await aptos.view<[string]>({ payload });
  const createMultisig = await aptos.transaction.build.simple({
    sender: owner.accountAddress,
    data: {
      function: "0x1::multisig_account::create",
      functionArguments: [1, [], []],
    },
  });
  const ownerAuthenticator = aptos.transaction.sign({ signer: owner, transaction: createMultisig });
  const res = await aptos.transaction.submit.simple({
    senderAuthenticator: ownerAuthenticator,
    transaction: createMultisig,
  });
  await aptos.waitForTransaction({ transactionHash: res.hash });
  await aptos.fundAccount({ accountAddress: multisigAddress, amount: FUND_AMOUNT });
  return multisigAddress;
}

export async function createMultisigTransaction(
  owner: Account,
  multisigAddress: string,
  multisigEntryFunction: InputEntryFunctionData,
) {
  const { aptos, config } = getAptosClient();
  const transactionPayload = await generateTransactionPayload({
    multisigAddress,
    function: multisigEntryFunction.function,
    functionArguments: multisigEntryFunction.functionArguments,
    aptosConfig: config,
  });
  const createMultisigTx = await aptos.transaction.build.simple({
    sender: owner.accountAddress,
    data: {
      function: "0x1::multisig_account::create_transaction",
      functionArguments: [multisigAddress, transactionPayload.multiSig.transaction_payload!.bcsToBytes()],
    },
  });

  const createMultisigTxAuthenticator = aptos.transaction.sign({ signer: owner, transaction: createMultisigTx });

  const createMultisigTxResponse = await aptos.transaction.submit.simple({
    senderAuthenticator: createMultisigTxAuthenticator,
    transaction: createMultisigTx,
  });
  await aptos.waitForTransaction({ transactionHash: createMultisigTxResponse.hash });
}

export async function simpleCoinTransactionHeler(aptos: Aptos, sender: Account, recipient: Account) {
  const senderFundTxn = await aptos.fundAccount({
    accountAddress: sender.accountAddress,
    amount: FUND_AMOUNT,
  });
  const recipientFundTxn = await aptos.fundAccount({
    accountAddress: recipient.accountAddress,
    amount: FUND_AMOUNT,
  });

  const senderOldBalance = await aptos.getAccountAPTAmount({
    accountAddress: sender.accountAddress,
    minimumLedgerVersion: Number(senderFundTxn.version),
  });
  const recipientOldBalance = await aptos.getAccountAPTAmount({
    accountAddress: recipient.accountAddress,
    minimumLedgerVersion: Number(recipientFundTxn.version),
  });

  const transaction = await aptos.transferCoinTransaction({
    sender: sender.accountAddress,
    recipient: recipient.accountAddress,
    amount: TRANSFER_AMOUNT,
  });

  const pendingTxn = await aptos.signAndSubmitTransaction({ signer: sender, transaction });
  const committedTxn = await aptos.waitForTransaction({ transactionHash: pendingTxn.hash });
  const version = Number(committedTxn.version);

  const senderNewBalance = await aptos.getAccountAPTAmount({
    accountAddress: sender.accountAddress,
    minimumLedgerVersion: version,
  });
  const recipientNewBalance = await aptos.getAccountAPTAmount({
    accountAddress: recipient.accountAddress,
    minimumLedgerVersion: version,
  });

  expect(senderOldBalance - senderNewBalance).toBeGreaterThan(TRANSFER_AMOUNT);
  expect(recipientNewBalance - recipientOldBalance).toEqual(TRANSFER_AMOUNT);
}

// Transaction builder helpers
// single signer
export async function rawTransactionHelper(
  aptos: Aptos,
  senderAccount: Account,
  functionName: string,
  typeArgs: TypeTag[],
  args: Array<EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes>,
): Promise<UserTransactionResponse> {
  const rawTransaction = await aptos.transaction.build.simple({
    sender: senderAccount.accountAddress,
    data: {
      function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
      typeArguments: typeArgs,
      functionArguments: args,
    },
  });
  const senderAuthenticator = await aptos.transaction.sign({
    signer: senderAccount,
    transaction: rawTransaction,
  });
  const transactionResponse = await aptos.transaction.submit.simple({
    transaction: rawTransaction,
    senderAuthenticator,
  });
  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }
  return response;
}

// multi agent/fee payer
export const rawTransactionMultiAgentHelper = async (
  aptos: Aptos,
  senderAccount: Account,
  functionName: string,
  typeArgs: Array<TypeTag>,
  args: Array<EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes>,
  secondarySignerAccounts: Array<Account>,
  feePayerAccount?: Account,
): Promise<UserTransactionResponse> => {
  let transactionData: InputGenerateTransactionData;
  let generatedTransaction: AnyRawTransaction;
  // Fee payer
  if (feePayerAccount) {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
      secondarySignerAddresses: secondarySignerAccounts?.map((account) => account.accountAddress.data),
      withFeePayer: true,
    };
    generatedTransaction = await aptos.transaction.build.multiAgent(transactionData);
  } else if (secondarySignerAccounts) {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
      secondarySignerAddresses: secondarySignerAccounts?.map((account) => account.accountAddress.data),
    };
    generatedTransaction = await aptos.transaction.build.multiAgent(transactionData);
  } else {
    transactionData = {
      sender: senderAccount.accountAddress,
      data: {
        function: `${senderAccount.accountAddress}::tx_args_module::${functionName}`,
        typeArguments: typeArgs,
        functionArguments: args,
      },
    };
    generatedTransaction = await aptos.transaction.build.simple(transactionData);
  }

  const senderAuthenticator = aptos.transaction.sign({
    signer: senderAccount,
    transaction: generatedTransaction,
  });

  const secondaryAuthenticators = secondarySignerAccounts.map((account) =>
    aptos.transaction.sign({
      signer: account,
      transaction: generatedTransaction,
    }),
  );

  let feePayerAuthenticator;
  let transactionResponse;
  if (feePayerAccount !== undefined) {
    feePayerAuthenticator = aptos.transaction.signAsFeePayer({
      signer: feePayerAccount,
      transaction: generatedTransaction,
    });
    transactionResponse = await aptos.transaction.submit.multiAgent({
      transaction: generatedTransaction,
      senderAuthenticator,
      additionalSignersAuthenticators: secondaryAuthenticators,
      feePayerAuthenticator,
    });
  } else {
    transactionResponse = await aptos.transaction.submit.multiAgent({
      transaction: generatedTransaction,
      senderAuthenticator,
      additionalSignersAuthenticators: secondaryAuthenticators,
    });
  }

  const response = await aptos.waitForTransaction({
    transactionHash: transactionResponse.hash,
  });
  if (!isUserTransactionResponse(response)) {
    throw new Error("Expected user transaction response");
  }
  return response;
};

export const PUBLISHER_ACCOUNT_PK = "ed25519-priv-0xc694948143dea59c195a4918d7fe06c2329624318a073b95f6078ce54940dae9";
export const PUBLISHER_ACCOUNT_ADDRESS = "2cca48b8b0d7f77ef28bfd608883c599680c5b8db8192c5e3baaae1aee45114c";

// script function byte code form `transfer/sources/script_coin_transfer.move`
export const TYPED_SCRIPT_TEST =
  // eslint-disable-next-line max-len
  "a11ceb0b060000000701000202020603080c04140405181a07321b084d2000000001040100010002030101000003040501000002010203060c0305010b0001090001090002060c0302050b000109000004636f696e04436f696e087769746864726177076465706f736974000000000000000000000000000000000000000000000000000000000000000101000001080b000b0138000c030b020b03380102";

// script function byte code from `arguments/sources/script.move` for the transaction_arguments.test.ts script function tests
export const MULTI_SIGNER_SCRIPT_ARGUMENT_TEST =
  // eslint-disable-next-line max-len
  `a11ceb0b060000000601000802080e03160a05203907596408bd0140000000010002010302040700000507010001030608000107020300030804010015060c060c060c060c060c050505050501020d0e03040f0508000b010108020a020001060c01050b01020d0e03040f0508000b010108020a02066f626a656374067369676e657206737472696e670e74785f617267735f6d6f64756c6506537472696e67064f626a6563740d456d7074795265736f757263650a616464726573735f6f66186173736572745f76616c7565735f666f725f7363726970740000000000000000000000000000000000000000000000000000000000000001${PUBLISHER_ACCOUNT_ADDRESS}000001490b0011000b0521040605100b04010b03010b02010b0101066400000000000000270b0111000b06210416051e0b04010b03010b0201066500000000000000270b0211000b07210424052a0b04010b0301066600000000000000270b0311000b0821043005340b0401066700000000000000270b0411000b0921043a053c066800000000000000270b0a0b0b0b0c0b0d0b0e0b0f0b100b110b120b130b14110102${PUBLISHER_ACCOUNT_ADDRESS}000001490b0011000b0521040605100b04010b03010b02010b0101066400000000000000270b0111000b06210416051e0b04010b03010b0201066500000000000000270b0211000b07210424052a0b04010b0301066600000000000000270b0311000b0821043005340b0401066700000000000000270b0411000b0921043a053c066800000000000000270b0a0b0b0b0c0b0d0b0e0b0f0b100b110b120b130b14110102${PUBLISHER_ACCOUNT_ADDRESS}000001150b0011000b012104060508066400000000000000270b020b030b040b050b060b070b080b090b0a0b0b0b0c110102`;

// hard-coded bytecode for the contract, so we don't have to recompile it every time in ci
export const ARGUMENT_TESTS_CONTRACT_METADATA =
  // eslint-disable-next-line max-len
  "0x25417267756d656e7420546573747320666f722074686520547970657363726970742053444b0100000000000000004038343738303244363644463439354331394633323644334437424243343745323835384438324431394346324132313641424134383339463237453738354634a4021f8b08000000000002ffb590b14ec3301086773f859599b649dbb42e52874a888581816e5585cee7731b4aecc8e70610e2ddb1495958982a2ff6e9fffdd9dfae033cc181f6c2414b722d8b4d389c5b72516e89234beb838c4792db8f8e1843d345f974f750889e0237dee546394eab106267a82367c86143bc179b2e7abe0fe9da371f4e29f8290f4dcc85638c1ddf4e26e9783ceb31fa7602393c7a05cd97adfd2d8e53aab89181fa5c6da1718ef280cfda3421cffe148aaf01bdf527728ffa85307de3daf49861233fd0d20bc40e8c09c49c4dc4008e0163f2f50c17bdfc63ee7d8a0873a5952ecdd22e9764a74a5bb328955233ac57ab852ab1d6ca6855ada658d34c0300554034afab6a8e83f67ef41f6d9d589ac822582ac43749718eb1f6010000010e74785f617267735f6d6f64756c650000000400000000000000000000000000000000000000000000000000000000000000010e4170746f734672616d65776f726b00000000000000000000000000000000000000000000000000000000000000010b4170746f735374646c696200000000000000000000000000000000000000000000000000000000000000010a4d6f76655374646c69620000000000000000000000000000000000000000000000000000000000000004114170746f73546f6b656e4f626a6563747300";
export const ARGUMENT_TESTS_CONTRACT_BYTECODE =
  // eslint-disable-next-line max-len
  "";

export async function publishArgumentTestModule(
  aptos: Aptos,
  senderAccount: Account,
): Promise<UserTransactionResponse> {
  const response = await publishPackage(aptos, senderAccount, ARGUMENT_TESTS_CONTRACT_METADATA, [
    ARGUMENT_TESTS_CONTRACT_BYTECODE,
  ]);
  return response;
}

export const singleSignerScriptBytecode =
  // eslint-disable-next-line max-len
  "a11ceb0b060000000701000402040a030e0c041a04051e20073e30086e2000000001010204010001000308000104030401000105050601000002010203060c0305010b0001080101080102060c03010b0001090002050b00010900000a6170746f735f636f696e04636f696e04436f696e094170746f73436f696e087769746864726177076465706f7369740000000000000000000000000000000000000000000000000000000000000001000001080b000b0138000c030b020b03380102";

export const multiSignerScriptBytecode =
  // eslint-disable-next-line max-len
  "a11ceb0b060000000701000402040a030e18042608052e4307713e08af01200000000101020401000100030800010403040100010505060100010607040100010708060100000201020202030207060c060c0303050503030b000108010b000108010b0001080101080102060c03010b0001090002070b000109000b000109000002070b000109000302050b000109000a6170746f735f636f696e04636f696e04436f696e094170746f73436f696e087769746864726177056d657267650765787472616374076465706f73697400000000000000000000000000000000000000000000000000000000000000010000011a0b000a0238000c070b010a0338000c080d070b0838010d070b020b03160b061738020c090b040b0738030b050b09380302";

export async function publishTransferPackage(aptos: Aptos, senderAccount: Account) {
  await publishPackage(
    aptos,
    senderAccount,
    // eslint-disable-next-line max-len
    "107472616e73616374696f6e5f746573740100000000000000004035364643333939394442364244363842383430304539323438363839393837413338313439344644413241343631334144373946333630323134353539324545ba011f8b08000000000002ff5d8f3d0ec2300c85779f0265e944032b12030b97a8aaca4d4c1b95fc284e0bc72729a503f2e2a7f7d97e6e02aa09076ac1a1a5c3f5205244c7a892f1ae4bc449c04291b32ae6a9ce25001a4d819c26a70c717d0bc9f33de6052f1fa7160693325c8d2905be4899e538f7b5f25662218f4fec796b958f5467a082484b19b2685c053cf7dac4a2bf98f50bc9c7efc236bbeb2a0742ad233113b7b0baddeeaeb9df6701ff9f15a3131fec1509190201000001087472616e73666572ca021f8b08000000000002ff9552cb4ec33010bcf72bf654a522dc10071790101f12b9f1a6582476e407a142fd77fc48d23826125891627b661fb39e4e32db22184585a6b5e1525406b52124dc34a8e07b07e03eab11686fa4ae1a453b1ca4fa20245ed4928be33629c03b87f6f6d4f21a50187581c60a3083ac4e97cafd0a07c7d570e5cac35ef3b34055cef71a6b29d82f00eda415a61ae3ece343064da109c6f41c431953a8758a4d413988bdd43c2f780893f2ab45035e74a4c07338103270f3ce141d9e6e5323e4d5efdfdcf6a508ec32d17338ae53c6b6fe9c33d2cb741287f01a7e457e87ea8cc5beb3cbb6cb65bd5bc45623f8e50c539b3ccb520edca58dc07d3acd75632358cc6f552e52cfb3c9b993ea5481e75e6381dc89a3db8b85df0443b5e9b7959b14d61c3f3d3ff14bee897fbc9caf3fcd6f43ec54364a9d355e7f00fb8d2dcfd603000000000300000000000000000000000000000000000000000000000000000000000000010e4170746f734672616d65776f726b00000000000000000000000000000000000000000000000000000000000000010b4170746f735374646c696200000000000000000000000000000000000000000000000000000000000000010a4d6f76655374646c696200",
    [
      // eslint-disable-next-line max-len
      `a11ceb0b060000000801000602060a031022043208053a4e0788015208da01400c9a024c000001010102020404010001010508000000000100000302010002060506010002070701010002080901010002090a060100020403040404050403060c03050007060c060c0303050503010b0001080101080102060c03010b0001090002050b00010900030b000108010b000108010b0001080102070b000109000b0001090002070b0001090003087472616e736665720a6170746f735f636f696e04636f696e0a74776f5f62795f74776f04436f696e094170746f73436f696e087769746864726177076465706f736974056d657267650765787472616374${senderAccount.accountAddress.toStringWithoutPrefix()}00000000000000000000000000000000000000000000000000000000000000010001040003080b000b0138000c030b020b0338010201010400081a0b000a0238000c070b010a0338000c080d070b0838020d070b020b03160b061738030c090b040b0738010b050b0938010200`,
    ],
  );
}
