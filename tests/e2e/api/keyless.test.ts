/* eslint-disable max-len */
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

import {
  Account,
  FederatedKeylessAccount,
  Groth16Zkp,
  KeylessAccount,
  ProofFetchStatus,
  ZeroKnowledgeSig,
  ZkProof,
  ZkpVariant,
} from "../../../src";

import { FUND_AMOUNT, TRANSFER_AMOUNT } from "../../unit/helper";
import { getAptosClient } from "../helper";
import { EPHEMERAL_KEY_PAIR, simpleCoinTransactionHeler as simpleCoinTransactionHelper } from "../transaction/helper";

export const TEST_JWT_TOKENS = [
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0wIiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.C6QG9WyEIAqYEiLkY8-5yqTKYtCzmnu2RM4P7iqr17toRXhL2ZqCiQYgE2TpY60RlOqBI7_aiHOlxJRvF_iQghEQQSWkgWhkcjVkSvBJW0IHm0IrSRl9ZytQHi6x0vPa8bUff5L--9JfxMiH27wOTrGtTA1n8Fz3G8JKQfYNQF2VawzytJu3lywduRj6pZw9-FFTgPqPsZWQvwhiX75Tgud976CpDusKOrPAM3rA9fXgKo_aTKeOPiEIm11ezI1bsOJ3B4JhsxLT5vszZ11Ywytst8XXwqWHjnulkJWjM9QfVUJhsO-jEQ5T_dYDqMVnnkdzjJyMRbvgbyNPUkvx8Q",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xIiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.bMYN2xPX86KhgBzGbC4qsV-daLww73mJ3NpNvzxJG12Wk3PjnCe6e6sN8_QF4ou3v0xOR8llSQFZ3G1Bn_ZpZAEqLVQs4h-R21LUuCiUB9fRA8i-YzbeahsNiZYTdrgHOM4iLSPn1y51xyhPS66uHMjuj4iqNvao5Uthnn6s4fbcX6aOlg3Z9jeq37Y13XbXa75pK7lquNtnd9lF9BYb8jZsw1MNhIHqMU6rGIAkdNJDCI8CJF7SzVUQgaU_JLyHNcBGaPBypg179KMQXq8Uc-JfTYnz44iR5YZ1tycPB5gDBWydHWjpVoY-0cSxm1PiI-Eb08Xskawuax2967gAzw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0yIiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.yVOH3HxPvCebPm4-OBeih6YdBgML2D8eMcWmwYFqG6jJqJZATEukkH0CMQPlsuKxi0_qJ1UUBy89ouFS-aaTwgfhjDx_pqYgXfB1etR4QJBmu-9TuDgvc9KLD9TGWbi1qwog_wuccUWVyqHcS2BkfKWTkziXzFmZH3ayqUJaEGtYAWRyiKiklY79adOHzi4VgN1sUHhpIHxOkBF80iKP3eEHpNgy-JsmeMlgJUY-70yHT5AUrDrFDKYBlU5MLB-3zngre_IPRGqV7tG4KjGelSJxcunr83CfNIllfDV1q6FPiLrEh7tsVYnqFMmrY9jGHKNu5vEnG4JkcBtCoW5l_A",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0zIiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.H8U6A7rgUjWCniDx8VyGOPgFTBYsvlKbYbT1FeVYk1PlRgITjl4jy4W153ysu88FMembPSNEMfTeWQM5JIw8kRvBUaVdjfDvcKsen_dG95kAzstmdHQs7PCmYVzfILZknWNArqkKoqx2EPaNaO_URcPxOQy83vXkFgs7Do0k6ORgOtzZsYy1TEvuXmxyxRE7qly0aUB56xZq0Wv_FSa-pg9EETaBeNoZoIzRPIpymhU4oHhy3hthXzUzUBAKFlpEOu7ydjlA_eyhCT2YlDXgjFx_2kLo0HUIzY3-sNvkJljXdJhmQI9Qqm7eROQQKG6id-1pXIHKZFiaMh9LwzntQg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci00IiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.KDdu8SebfBNRv1_We66cxm6y9uRi9IBUn66wQD133m_lSpEGP9GUpi7Soe9CSENfZB69PHV9F5dTxXKj75wwGfzIRfcp18hyORcZLmmyjZ4icSDlnh1h9uNAd5ADqmQUHeo7vFlOIP8gA8fGG29pkvupJhtCzABflrOYKljzZYZ0fZRE_5tvyGXAUT6VrSN-CkVxrppfI0ZgcuV5q19LofyHg0tl7qJv7e3VNPtREfk0XJws5-fGqBImN_zjTxWQoDJBS1q57Fs4sDe5ZstWAoWzSvIJYfLQpdY5OD0uqqOqGMzl17Q1tCj0ajorSeUeKoRjXZJm9CwFriQZWOPPJQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci01IiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.km38lnzSyfyra62C8S58gE3DbbUzfpSX3uvb3NxKWq1LbrgvkB1kcOq7YQFTCUFrb6lGC5qMPJSJlGkiycdz5iL-SM4MiMv7Jp9YEJw7IEG0ExdZ6FJNblYUNuBjF-up3B6vJ31wy8h1jJa1QsMB6JFqfJtshLURXJ00fM1WkdA9smIpEv6nrfv83yUZr8DNYQ1dY0HZlipPaGeGCCmSXJxFYQxFLVxp5cqxS_qtyB7y_utu2E3RiPwn6Eq38n9-J2CmYPSEFc4f4Un12Kc-_VzMMULTMP5jfJZt0lGariwx7ZdIsXh9956ZZ57NULs1f0LTWk8WozPqyfUFFpISTw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci02IiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.HwOk4Jm4n_nuW7zQJqbLa5apIf9OH1xH1VkJp-is2-7GpiSTRRjsbp38VVLRRFL10YWTcrz9clf3ZMjz5_Pm4B7euabeFkTq1sLt6LE8rBZg-ccHvWHHkOsM_9fEYTHne5iGL8fSuF9vnK1SKbCw0i1SBGExrm24u2HL6yz8OhauF-rS0zJ0s9Re4snmM0SYjBJO4XOzMJ-B8vwJSQNbKz5nNBoBVHifJWsFcVmOvn1NXYxrYSKtDgu0KTMmpesc9NBESxwg9hx9npoVd9-ncbH_cJZfBvR-dsADgy8HFt27bnPWk0Ps2LZVxmKPruJLqmY0VD6Vz6vU3AHgsgsQqA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci03IiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.A8PPakHK1SiaEJ1cp8G-_t7UkTvDYX1h5TvBT4Cbp3WVUh_JHO_CNPD8_M8SyIMKlEAObKyglio-MXzEMkxfGnwmWgt2BtIPqia8BATTzbhYfiSM88pbFKGVBcddaJv6aUUBNr9gYim5r11tLBiD_b42xw6mbFzIwbbJ5mkbeany-N_0BrgBi1zmwRo8AkcdABlVEd19qe66vd-37t3h7wQZbILQ8Db-Th4Y41KbsBGF55TuBE6E0xeqRVrfyYsJPSZUi81OChPT8C-pQY2HWRBaaPt4LFgbqn9VWpagCjE98GZQE8F7Y2CxBwzjEqPZgNLJsFnoXiMmLLL0i8Acww",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci04IiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.DCEHEMvxm6n3u6RYrv1hOGe9HPoAPcnrhRHEPsINEX2729wk07Bw8QsOfT5dRr4u5CG5DpgZrEN1NAoGO5b_rTmMxhVNoPUgSb3PkqaalGgDjJ5oP5wu-PWDTojevI44MHNtYslOj6KIIrHTZZZYqO_ev8S9uPZ-U4FyPgB9ZjAbMjgNIz5RqZyoYHHyqCEvWA8cIE20as-mpZ24ywQ6nB_BO8KvGfh0kGTV2CBgXlfnNAp8egdiN-x7IGihOTl--XbTK_MZWsTVi56z46RhTvuwqx3TozGUu6Cvoyqlnq2bYx3Az-tCU87Wm2qSeHJ28HyMSc4MF1rJ9PLyJ8w4_w",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci05IiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.xyW7ZEq3ZIlVWnpaZEPYOfbm6RomIkVHzCvBlSb2TmgMp4wl-2je7-Alpf9QzvPkT88764rqJckx_q_8fD0yvechM8eKcP1dpvGIpzuY0LglNssmem-K5S-s5h4hZJxCxGfQEQjD3mHeHp9yDXVIBATGUXG2ZAXWHrZdESHl9Zxj9t-7hhqSYw5eYjB6lWsyRijE74DMPyXlNR2LVtaTqVfisiluPnnfoDRAUFBxAzM9H2VmoFayJyiiGMvClDg-EicAuneq6xjGsrb1aOCCcBK7OE9JgyAVQ6rq5flSPrh-V1AEDiDfvhKiHIpfxyJdnGU8clZ3_MbXPj0W6xtxzg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xMCIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.U2nRCAghYwUeP2bY-STkolILxPXvtg-sV44RxwR4uvvFJDIGn1ZWsdpemFZaXEr4szsAmEBoX-PLPdjKhnIPbIy2nT1sNWq33fp2i6ioruP9i_ndAO4qVwWPEtlonMSWfTXbIEVNB9f4WHhqxXpM7rtKRvAjDW4SezjQohOsspBz-rCP8-2gxpSlPf5A0eCFVAasgBg0uRdLPYQnws7r-bXuh2Huv1tX8MDjmYjshFSiJQrjRLZ4sfEgOrcrHHUfJptf16T9C5-R-pm-oWOIpXGSUlBz8QJAe9Y5DBgTOiej92L9bDkKUXTwt58iwPXAjBKBeg5394jSUacrgboHyA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xMSIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.eChHtb21NqZyv1FMRMVinI7lhqXMcTRtYFnKUZa2G5ahhm2ZLdAlRRwzwHm3iONC3Nxm25Qyd-kfdRio0KRlDAegSx1FMeW_F2LQpWk42mzCGMqad8VvP8p0We0GAO7sOCy36KvTcSXx2dWTDHWK4p6nXrF0uI8xkU5Fr76TE1ThJK4K8MGy9OY-v7FERaL6b2-0Ui7M8FBHufQpiJ36h5aPETnC6bwII4yCmrUfU0B8tFPq_yp2nDhze0kAa8F1lQVLUcBteZ07MNQ9u2XvelwxQ94MI61NgRGFmBZfQXPRQIpcoJHc9H8hEMzVWMCYNIZwfiTJKxcXnlKny2fx6g",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xMiIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.BI4gvREMhdH7BleKF_rhutgBGsi4iG2nXtROKD-h23BLfcI7Lohq9CtAQC7qPi9HJszQxfIOyp79yuVKl9xT5pDO59rFvVPgcH4CTya4CkuebzC3avNv4kFrX9KlF-Ks5z1oBghhutxoXfSntx5SIQvGWeiXQ0EYYqE_uyrx3o89tMjTaDqpc0_vOIpmfU4bEG0yZnsnhObAOjOxr2id2vHlS2ECzCMbUeaHi_o_dQblIpq-eBVp0xjQo1j_2480MzPa4TtsnsvugHZdA3cCzThyLFnj60hOV90EgBgHpnjpWsmNBlocR3A3ZNGNzp5j0ebA7axiMxfIY89reEbbcQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xMyIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.ttKtdAnnu615SXnZDF2sZunRFKIO60uuYRnGaAdgwWlX4oQpg6pSQuNN6l-2ix90_BIzR-9P1UWulcNFG8MyKO2t3QafFk-sDciET6MGRejYmgJ3XBO281iG_jNYmrcRiHOQdB9oUKQdBQkIj2uLYFmC6J_zxH6R_Wce_wAwRmi1Fa3-LM3BpO0zNNd_GT_c8XC7qHDMjgBjSt7X25Y6o71VayrgZDhefhlyRW-Q6vFyk4a8g2tPUCgucFrSdATemiQz5peEWCkYaGWR1SMC89dSj9ugeBZunOwfoRzheE-o4nL_TPbQVUdpgJgZTBPWhw3hZnagS1_-a5Nmwv98cA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xNCIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.Z1SFWWjSJOXdiE3pBVmjokbOpj842YpgQmrWszfptGTwHADRL8zxSqE2R5gexCI_NlGizbEu33VqVGoONC35ha51wF2IGOCS4ziiZxMFzB4ZIjkCs4VmFV2ZUNyVkoVj_KWg8BqtMj8qVry-UlE_PHKbmhSWkRCSA64XwNb_wVzv5Ae-CVb2-B6zwC7HnpqAmHE2Eles9sDVRRqsagoi1NIoA8S3e1lTE49HkqhQz9bRC6AzLRJJJinu62_I1I4IM1Ub0rKSGlHompTVsKTRjxAHUqLjXDYAQaodZXuk-HDpQW7cb8rmRzOurYwMerFis_TMglTbJ0ThAuwnENGhyg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xNSIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.cv726csl62bGHNLalP6a6JuwL1arfeZ1gaUfvGcLl6Rj-NN5a7e8aPTAQy-xMFQwrObCcHLuA6d8kMYUeYsH2HaIrtAzkrK9iQxaYsJqt1jIJ2E4pm0eByQ_rt4C8l561V4obrwRIfxmEVNJe2AT6wGPZL-mOBo3VNTpr6HnBDBFcFBMB0sXGW4tU14wfMfxREfyHxuOcR3CmGORDwgCIrI0rQ97ZktL2yTDQX9n93O8-unWqiABwT_h9NA2KPJinZ7m45o9XrA666-pSQBuW1qF6Vny-MvRt1xdmQtWYf4qreLxC3xfqCyH6PxJMV2jo-RRDoHDmIRLTdjK5-PCcQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xNiIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.Da3b2p8ZD8tsg7Fal4XW6c8keRNdBVyHaWvcRzu5e09TRYKhZOhLlLa9QlHeJooE9fPZUOnRpqj8GHkWGKS4M5xdzVrB56FrMTikFU6nDIsSML7OBtx0DRJtQaScILfFcprdKUJLpyGTSG9xbMt4jhbOdJIc1ENug4e_RsyxSm8t7DJVawqWjNWLbAQyoY8APhMeoy2T_M-iDN_BdzBmDvFFuq_7hGFYMDaEJXNdFlVDAf-mPVQ_1Rum-WswJhOCrfyytiHVioZIKCFBE1tsslBTmY3ZQw7gNGXtHRrdZpXUPQAaOPPmBh5Fd2qLz0xq_jl6FBfz3hJpENW8oVICRw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xNyIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.W4NHUzOIpwW5L_aesqISGVleKLEooerDh_AoJupZKaDAXNLe2LM43WC0eG_DAVFCRul1FEPGmRIKP2S-oKpbN7GsSvfoGAcF5z5HKOtHkq9cfea4ApCPJBCCqAEJ6FAkpkN-jnxsBCKn6N-YxO2pu1megKhrTIgeFfLjYBG6B6vsd30A4C-Wga-fECFNA-cnoU8EotEWbtcJ09QsTR_6y8kBTqEmdiAMzh-5GjrEqjhD8GRkx_pVpTj_Zmfue3vkoVQlAeHwRuctrZGDXI4s4N9XSGEVAmetk72jTNS7Bg9DTsJW8Rx0eUXNaFnCZPqAAAq8j0CKcJ3LD7qmNtefCA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xOCIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.tOO0QELwEyZqj9XGbqwg8N3ONrp29XvRmfByvNOELIZDZZrv4olvLinkAld3XBtwMAzHnUOnqYZBZ6RU_Y3alCwTmSXo9DPEH1nFbWN1ZqLwi2QvkwrW2aaNd-haGvhgN-IoL2JM93yzqlehfy6wv52smsGk3_7Q0hQLqv0KsqpF3MbIs7MVDmHSuV0fo6DRf0zL3OGjrRJqUz1BeRLbppK-RYeEhp5pPPTh4xdDjO70Bthk3k6ja4g5Ow0ozL9hbS-6o0z5vwJftg_ZEJ-KH4A6pEPpyffKj96OMJNpyhZCJjBGWI6XzvQobav3zrNh1ZX_zFo0VlZYfYmIubG5Jw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0xOSIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.sd4WpQQjZaojofmkcOY1V1tZ-lslRLMZCKpUxdD_VR_pwDDG5p5IvkP4HVQQGAuFHcf0N6laJZCTA-KeLsqoKP7wqAl3NeG3BpQeWIiZjaw_PIWpIe8ad6nZrRUyT-GCPAHHd9y1nKPIQAjDPG2hFqt3CU53DNjX2kG1eyOgLnxr4LH5Ipz9XdQMK-NBubse3qjH_RF8-2vzA_QCDgwiLqKsUSsQbwht4P_kUxbQobSSwq44wQLV2HSP4t7Rm0EWuF_HvFjO3XzJK6ANDsKQeVM8rxGY0zvAPuRwzDxZ2dJB2FkYyT-NmmlXehJag6LcqiKBPyrXqv8x3Vq-EGI6CA",
];

export const TEST_FEDERATED_JWT_TOKENS = [
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMCIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.BCN-S-x_rzfjdd3vXWi-uSwVJ1dzpMNNBrIFFG43-R5locy09OLf8kJvL_LXBsofLWlbQH9vmXmfK14yIMhU_4OwFE4egK01mAankyw-TME1pKeJxXVSc1E_50hHMWRYlOoik1kA5QK3ZydBYzYZvTI8tSPEk4BA_FDJVNuF0MZhtHe71-ZHv8anz2Q4ytHY2w0A3XygHlK1dry9IreUB3jsTPi5B4wodKbPCOH6E9xgZCq4s30OgvPav51hJQXQ6wR6xN0ERCMZmNJj7leXjGrwYMJjU0_SNgcCASmOkEK8DHdqcJkuF5ugbzlOADt42F2J6q4GijjO2sHhzndboA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMSIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.wzFIsFnCzlhOyDOaMPamxyd9mQgXSKlWoLJrhhaxqZTAbqzahMDD6xJd-8mERqzNAfKStzP0VyX3yOvKn5HzPME-ZsVtq6IAbeCIt6ZlDibsb0nq0nniIa4tMCkCHnThAge7e1NfFrRgeB3FzzCc5dMBsZEnJJbnnMpH0qKkLGM-sbslgzRnlCs1lXRxVb7KjzB4ALSq8GC8sazNsBtitBNwNUjloKD-YVz1wVgimjX1gQR5Kwy44suPLdrC9wIhOgwijsMkd2xh2xBzq_4W7nqgmlX2FaSs5lflrvA38ecbRu19tu9X2y93I5Ki8ht3648di2Qf4hYK4PG1hSbGtA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMiIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.OexmQ2rCjQwRZ6rr-6U1amIsY1JzlU5JNwKdbiCNnY37tHFoSH3Mgshr3R34eYuNF4OIG1F-a55m5cNf3-FF-tsDXw87QCVBlzlz4vTu0EloGnFSzYhcAb8U_5feVlsKBdWJpTKs1TIVhnNi-vosA_ObETnjT21LLURm_NiL3gCLwkqcMnvbmvB7Zkx46jK9rezw-F6yy9z5gja5WrCgcdLco3Um3y_Slaov6zvISckG-TYJ9qVy86hhYVZJkvRUtOwX7lKbz2z9vjFIEQMdFQOwtp81_NWqAmPn0PNVW1KQ_rMsmzXwUkVzMhI3Zaue9IBpaU42cLH6me4pS-58Dw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMyIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.YeXM8xecsIEkFVrZOmlygwj54LLnrEQ0JVFk7xComSCgc4_rPN6mX7uvHqbE-vSsPGiUX75NJLggxuzjGjyf8SHywy25jlvtewhdp_SrEoHJ22rs1PnhGh8XyXvul1-JAEQpV7_41-a8i2GPAGyweqhvpjEH2U6o41tCeZWzcDZ1XjFjfpp3v0YcmliXY5-vGrlj906B4m4Il4p6qnhloFAod2mNRwR-Vp7akz2wdYv5BnlkieTbl8grkuLXFdNuEIhUBWCA3lQY1WrAZRUQc74CVuZMQHufQmP95vVofLh6X7FNAyCmXwa6opvIQXzscyiKC-xlViUD-HPHysQHzg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItNCIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.eS7g3uRq2Jg2jREfmnRZ2Yj7kMEyp82v3tERdY9OTCjL_bhzA5d_HxqnfdmklTvcWemC01KzMIzrjusVgs7YWnGaelc8qR9djBArj8gJRAamksem2SYSJ4dqO7wMBL9HJ9705vtuQesapNRpUHT8qj0aCa4pZwz-Ex-zJ98TKp_7vppsnvT9IP0GQuKHN6GMaBxErLnsF5lK7Ba9XaP2EAJMfc_8_gIDcO3kTpvo7VPLyN41Y1S7zTrmW4ncFzD5uPa-aQX4Crw93TxnQlAB5Zfv9Ox8pjLpi0usvjEHJ6A_fYi1SAalcqCF3keFqEBsbhSK-cHDawAd3Ki5ryABGg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItNSIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.teQBBRCSW9o_j2MaxyLRmm1wdqK56p_IsZ3hj2SLrGMuXM2YiEv2DKJh3FL3HHn9ZgEdA2BKl5k0Y8BpUG3ebIIZD9sccTa8aX989q8lFIxrY4sIZhMjRxypHVu19iTtlDtIyCJmqOvhEjae0I19d9gx-Mqx4lFKyoFz5hnUBi0UwvCmttHu8tqNQCj2HKTNem-zy7kBZ8d7YpjhXSDEUm_vwBubJhETqIxfBPkOS-P3vFG-yQMGNeU240IFElII8rAPbpyDGY83sdQ-3sw9CniDpMEVlqJMqpmNjLSlwh83RcsDkV4SQXgpWAOY2_nF7IqA5Um4v0LovKnznUaTwA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItNiIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.unkS5CT8dO_6K9S07aCn8CmaZJ1-MX9D1HyqDslSOG_ImHcJCB6OQOM7-xCgWT8ebOovxinCN77w2XsJpPXQbZEf4v8MDC8X7kJo7qqCmc1LOdlt-jcJEir8XThygl60-_HVMh93QISdmIFE07EEQENrSa_8OyQk_94glJlL2ng58g88U67WUgLHnyVvTlJ71Sfd3b1TKpuWuHTucncFIFNwX_6Oyl0bxFEQKOZpoNCpp1UThdMkNE-sg5Ec0-W0Dheyfxub74MAMDE_CILunAiELd3mEuOVwHr6RJkQre2U_UZsHT175pezfCxCM5ZA4PpsNZSSIkxS1c7KQDJyBA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItNyIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.ple8-oCzCov_tvaK7hz7m4eE1RkQgpVk03-8Eh87XWJiZYjuD8zv4u0o6WREkHQzO9AIf5cGMlcyBPWer1680dVz46mvMeFvftxKihP31N5Bx5H56vIGNmjlIfwUECCj0iBIxq87Ixh5WTXkKd9bFMfgOeqcQniHDJQBSp0i-5UE_1Xxt1hALGCMEJxJ9HAhmGbYnXrfZ1zkUzlXndSQYm1kQMuqFs2TPoi5wMwV8vAi_zlOJvVQ3uAqCOQXJkDyogMwM2SOgX5JEP8GpfcVg9dAx9nY3j2fJ_DdvYuOrnZqyVjlkrEJsr80PqT0pw0cRE7gPrjMKDlJ6DXzRzb7pQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItOCIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.ajSatwHX207cTD747yFQhHaBLAwhAdyguL7nxEzhkydnik3e7hGxokThDMfKfxwnma3jS7q7b-tgGuv1le1euOtdq63Mhev59SA0gcIZoTo9cYhm-d6dBh8t_AOhNSwDG5_ztmAJvV8vt2WK6YA68sRszuTM5xejBC5oBcSRUJWDNYgnbVPNT8gTiFyk-67YBP-fFUrG9mvD5XwSw90cq2NpLXa0j4hXTS3XjXRavJ_5ryXwlijQg9NqDzmFsLJK2WqpWlEvOy2ui5u6PLwYLxotTM0qMzhTi--qB5VJqNPCg7S8Uw-cjQ-pnyPrgVVNIhxmO5K-mF6R7rnkHEJZJQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItOSIsImVtYWlsIjoidGVzdEBhcHRvc2xhYnMuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlhdCI6OTg3NjU0MzIwOSwiZXhwIjo5ODc2NTQzMjEwLCJub25jZSI6IjE5NjQzNjk4ODYxMjY1NTY3ODA0OTA5OTEzMTMwNTA3MjQ3ODE0NTI2OTEzNTcwMjI4MzE2NDE3Mzc3OTY1MTA1NjgxNzk2MTczMDk4In0.bGjpsD3NCEWk4uzbp0p507UrZYVAAB0-jTVFFlTO1ULWSL8W91AtMskIqGfSL0hPJY9qIZQ7-d8qns5T7Gy16lESV5GF3hiKHcOaMHzuA-D0TJXR366jBAGEloEx-hU_S4mXJHnRloigYBWcE9nEHv50ZqmiR7GHHJsGhNt5Zf06Nd3FlAi2PypK_QWYGgC7jeq8AYNhS0SKjaKDTClGWPscl4IAdggNlunXgIniAJeSneN1vrCXwlbjBFYkWZba3txvwo78C3VrSRl3v9p0bbW3Yp-l9eSfKIdzfICX8mmCf3qky7-I1jRyG6S2dzzHkhzOEhEilVRW8veLbZ0j_w",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTAiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.mn1OHr2l_mspJIWHhW_CZ2yPoYfU_suYrLS8wmPqcPaVPTtzh2ygTrwyqnw6SArjPRBYJZ3kjpteG5C5RLs5nRCcH3ZmHDokIMHOu7upbh8VXcPGEZftS2WHRIBMyFALUs0SUIz9fJqWOZmN3UO1OQ_uwRskLFidOkt2OxSIA9dR3wtjl9UmXctnDASJHl5y3i1Q3jTD_FF9qDiPdaPCvHjmOmzXNgrfl1xLLFUHjZg13favXA8SeyydLLfNh1TqUZIfXbav9p3Nys-8qrBh_O9XTxRptGwBnAZvQ9rMHnig7F-ZmEXjUR5XcXuyczmD-Ty7vHbYU2LLwwt8ePqiDQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTEiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.bqeIO4UJc4mRlRqB-fOAjUQSh74mwEprEAxAT9JFIfyRAUNeJwlzv5MwrF8Qde4s9eR-BMxvdMJKIaZHTrJZYLzHmQ80NfILB0XK_MDrHAQBxi_oq-drVGhAVAVs2-4BqdQL7ZIAp7SMZUu-2bNxgl6jOhLIH8cQPhtUc8kKYWxhrhOl6PNuYgAPjL1bD3An4XEranvLWTnqi8Cz411v8W7QwbebRqodkEghUYvvH3ASFoHSYYDocnQiuIC46grxZu-WRA6UO3ICwUc3wgAPm7n8iSINOb5wDbKnAXWb07s92bv00otydUVWpOprAcTyy_PvZPZ-8FWE_0WBXwA_Gg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTIiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.jPpyBfxr-QgscJv0mxAn4UKMCI52mJwxF2sfHhH7Un_C9eGFLRzO52yO2znaHyV4eu_ggOFc_bXnMs5I2_OM949AryYHnEhXiaKQPiMex0ciieX0acgTuGBWss2g3xLaORJbbBDCFq48JeK-XY0oIX0F1Km_wszJ_bSTFF2PQxPmflsKjeFl6naidFLBl1qN4wZ4abUv5JeRXT5KCB3zvURPNa2Ub4nQWncG623L8vVU0_Nh5GD2aHvoDWKiOWWLU7QhWVxwRtxaQhtvkHDsUKFcdPFxns4AWxGsoyMNXEyonSAY4F4zcueaJLIwt6VZ1233Q2t_Igytq29jFGQh6w",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTMiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.p_ORBV4eqmA-ItGzAfwPGrMOMn8mLwxz8oriHhTzf-nDiikKT3LJKoGUT56zDr4HdovsllAP9ZnZuIh-aKhz-hjv7C1dpG2bH4iC3ZD1DEdL-yT3vzzan_vWJw_uj4iIVLm-_15sja7W2wiVzCaCOiy52_cSZWM6emFPqa4zEwL7sPLPfMtH-jtL505hH0Tf7JvPewqXKuKbLeV16hM64naF6F5fqRnWaJrW1AnIbz8QK6NLpNjZZrC8keBeeZOb5mhH5EVvKT2J4j2eBGSWrvhFRZMJRkaLGxFznpqxWTGGc1IvjBSIju66gn6vccklJ4Vn82Hl0RRMvyQQ8MDllw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTQiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.eCdOPdCCtsR1xntyBZvg3bilQhxu8FnFwcAbvNf1WZUmV2Cv8hdT-8r40k5sBfGjnYO-MGaYdGh3YKN8n_wIt3IxExLUvkjGT_iTYo28SZlF7osyZ9IVhNZTEmQGh06Gu2yFcje-eV5Y8b-5TB0kCbsWkpCrM9CTaISyJaxAklFcYNqUBLE3Isd5H6d9fIzKJvPT4oh1RN3GXFIbZKlzpNjWRn3VwG-LMr24QtO095qYulc8XM77n6l-Y9XYsePHn-D-nP_zsOumk7yyWUHpl7Zx4HtKScSDxI9TA3fr6G-rdKvSimIgw73Wyih3C4ivL-lHrLVWWKsWRpdiEe3Ikg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTUiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.OHNr8zctY6ZZum9ULjjSBqDjq6aDPLDsHh3u08oY0vWrHAz9V-a_4sJ5zQJvJTFhoPwihPaPPW7sGjLEA1bwqIZlH4iIcq-d0-uEcsTiRpt5M1-U7Ie-tuQAuQedwcMGS5WYL-Ky7HFQy4Ew3byw-ZOWoJw7SAWa1JBF9s6gzY_Is9dUciFiGKvLznJS_IApJBhBKn3-dxnjnA1z-US6qiebKZL_FBgALVxRBoVqfSKsXo2CXShFP6IAZ8CCjGS8xbPBxXLim9WK9zrAF4oNJatVhpAx9KqjjfhkGT146aIWMtuSakuLdmn5moYPkR9NeW_cqFv-NQ_0EW260EO14Q",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTYiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.RQ8KXbFwpRluLWOIpCxu9K5PQqrdT6zF70JiZZMHMUDCxM0COeupGQ5WyQ8-eTobADcYv7yT4o2sjMS3CIUKk0yxJ9mQhhqFatWGlKHym9arLlvGijxyD5wGnYlqiwIwBe-1LNq6bUyX0th--TsXUG2QY7qeXRnqylUHmdI6Blq8Pa87yb1qC-D8tHUVqGnWDfgGbSzkGoyu4PUklu2MiQfU0eZJRvgBBxO-CWL8-Gcll9kINDr10_2tDkwCNPgyyj5YsYGAT0qCwVxWxoR0b4QGiPynd4OOaXYRHJ0pWLeYv9UUXp3ZcjAKpzX9awPxu9XW1XQXG9LiTvJX55Sueg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTciLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.gXuZn_HzgoQVo-E1w_hHkj7VZx3PoWF6bB5HVUBKLwRRW0R6kd9y5fNow1op_vGqX7IjxqOTc0yRhKmWRwMp6IFWGbUfhw7B9mYABD8PBBGEZFTSGqsUqOOn5G_6gmXmcKrkpPBgAdeu9KZI00e_aks5Nm38Eo9mtpA-NAxcFVaB7H5czX5It3QMLQVZm8nRDT6utz6yKDOQ8jYO5Mfui3E3q1FQLAPaU7mH84fkbfMUbm6jiabebHE9DPSogfz20_TF_LTRr_dVtIRzdHOZifdX8RWU2ZQptFQyt_H-0zO9xudvLLZW_E2jOzl0sLRhVr4zGHIqXE7pcjauNiTc6w",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTgiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.m1FwlGIn8Z107Z6hCFqOZPlZXIQ8xLZbH7wyJ_Dlu7bTSM_x7mP-Zpq6EPcl4fiKM0R5BOEp30PIdoi7epx2NecgtG0ZGD6kFIfAf1WTPOWFnJaDNLAhdPrwyPy1IlMo32azw1n2v5wMyS2136drEEpZbK0FlqwwdriBfex8LPfK52UB3OiYhfD1bgcF3Vmk-KbE_I6NV3lJ9bIXzaO5e6oNQNTuE4akosvjvV2eyyj3cGgjjhz6JLga8RG2l09Kp1QPkftKfcxb7zeLqGrGCYy3pzngnd2NSr-3bSib1DqqinVdIIAGD_TKSRQbL4-C_cPYX6mzwHrolt4RgLCX6g",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhIn0.eyJpc3MiOiJ0ZXN0LmZlZGVyYXRlZC5vaWRjLnByb3ZpZGVyIiwiYXVkIjoidGVzdC1rZXlsZXNzLWRhcHAiLCJzdWIiOiJ0ZXN0LXVzZXItMTkiLCJlbWFpbCI6InRlc3RAYXB0b3NsYWJzLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpYXQiOjk4NzY1NDMyMDksImV4cCI6OTg3NjU0MzIxMCwibm9uY2UiOiIxOTY0MzY5ODg2MTI2NTU2NzgwNDkwOTkxMzEzMDUwNzI0NzgxNDUyNjkxMzU3MDIyODMxNjQxNzM3Nzk2NTEwNTY4MTc5NjE3MzA5OCJ9.xYHVyi1BCZB5szBOS4xbDtORAreaTiDmYfR8l3mmApQgLuAzkv4fPGuClLEitD9rrh1hVQ1tgYqk05cXKA_al6vEa8maxduPd-Q41Yp4Ji3-CU-MgQYqtZNyWPxv9dvMxCat_BCs8z1tZ9g1d7fLGs2G5-IgDhlNhmsmCanLxUUDijPtjvA6xZfRqR4lzS2MtyzPO7dMS7YZFV47O2Rl4CHhDOBPHqplJ1I_T26zurvuZWxT3vOy4qm863dPqRli4UNMTAxGfUB2xn8j36SyhqYzfYuOXjHnTgHsxP3yHY2vg6ttnscoU-Ue4HN6ICeAgnUUXdDpoaPan4qO1OLunA",
];

const KEYLESS_TEST_TIMEOUT = 12000;

describe("keyless api", () => {
  const ephemeralKeyPair = EPHEMERAL_KEY_PAIR;
  const { aptos } = getAptosClient();
  const jwkAccount = Account.generate();

  beforeEach(async () => {
    await aptos.fundAccount({
      accountAddress: jwkAccount.accountAddress,
      amount: FUND_AMOUNT,
    });
    const jwkTransaction = await aptos.updateFederatedKeylessJwkSetTransaction({
      sender: jwkAccount,
      iss: "test.federated.oidc.provider",
      jwksUrl: "https://github.com/aptos-labs/aptos-core/raw/main/types/src/jwks/rsa/secure_test_jwk.json",
    });
    const committedJwkTxn = await aptos.signAndSubmitTransaction({ signer: jwkAccount, transaction: jwkTransaction });
    await aptos.waitForTransaction({ transactionHash: committedJwkTxn.hash });
  });

  test(
    "installs jwks for an auth0 iss",
    async () => {
      const sender = Account.generate();
      await aptos.fundAccount({
        accountAddress: sender.accountAddress,
        amount: FUND_AMOUNT,
      });
      const jwkTransaction = await aptos.updateFederatedKeylessJwkSetTransaction({
        sender,
        iss: "https://dev-qtdgjv22jh0v1k7g.us.auth0.com/",
      });
      const committedJwkTxn = await aptos.signAndSubmitTransaction({ signer: sender, transaction: jwkTransaction });
      await aptos.waitForTransaction({ transactionHash: committedJwkTxn.hash });
    },
    KEYLESS_TEST_TIMEOUT,
  );

  test(
    "installs jwks for a firebase iss",
    async () => {
      const sender = Account.generate();
      await aptos.fundAccount({
        accountAddress: sender.accountAddress,
        amount: FUND_AMOUNT,
      });
      const jwkTransaction = await aptos.updateFederatedKeylessJwkSetTransaction({
        sender,
        iss: "https://securetoken.google.com/aptos-build",
      });
      const committedJwkTxn = await aptos.signAndSubmitTransaction({ signer: sender, transaction: jwkTransaction });
      await aptos.waitForTransaction({ transactionHash: committedJwkTxn.hash });
    },
    KEYLESS_TEST_TIMEOUT,
  );

  test("submitting a keyless txn using an outdated JWK should error with meaningful message", async () => {
    const account = KeylessAccount.create({
      ephemeralKeyPair: EPHEMERAL_KEY_PAIR,
      jwt: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InRlc3QtcnNhMiJ9.eyJpc3MiOiJ0ZXN0Lm9pZGMucHJvdmlkZXIiLCJhdWQiOiJ0ZXN0LWtleWxlc3MtZGFwcCIsInN1YiI6InRlc3QtdXNlci0wIiwiZW1haWwiOiJ0ZXN0QGFwdG9zbGFicy5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaWF0Ijo5ODc2NTQzMjA5LCJleHAiOjk4NzY1NDMyMTAsIm5vbmNlIjoiMTk2NDM2OTg4NjEyNjU1Njc4MDQ5MDk5MTMxMzA1MDcyNDc4MTQ1MjY5MTM1NzAyMjgzMTY0MTczNzc5NjUxMDU2ODE3OTYxNzMwOTgifQ.v_fayuJ6_t76mX3SchhJNwkUDDkb7RyQug2SNS0PlIYCkpaHwHmtCakPJmuBS17RKCC0Hv2urz4MK54xYaVzkJUaINH9RZ31U5iqXZLDveVEUbbfT34vaIeXjuKIGOYnf1GDqZIBGKLN_oDN2yASlQMjs4YSQQdC-JRcHYsSmm9yDjqbfSOMj44A0Vce2PvA7vFVXCYrjOOqk0yxm3e-iXm1YvbOeAMBTplVwOuGXA2qmJWaJsmyIhn2pK1RDp1nFkDA0bxvsxKLZOuJYrz3k-ENOIiZDEkP9bYFMFN2bQ1pNaJDt15XpNJwNu02Xg6khKp5DxPcdXJidli8T2_T3Q",
      proof: new ZeroKnowledgeSig({
        proof: new ZkProof(
          new Groth16Zkp({ a: new Uint8Array(32), b: new Uint8Array(64), c: new Uint8Array(32) }),
          ZkpVariant.Groth16,
        ),
        expHorizonSecs: 100000,
      }),
      pepper: new Uint8Array(31),
    });
    const recipient = Account.generate();
    await expect(simpleCoinTransactionHelper(aptos, account, recipient)).rejects.toThrow(
      "JWK with kid 'test-rsa2' for issuer 'test.oidc.provider' not found.",
    );
  });

  test(
    "submitting a keyless txn with a federated keyless account with an outdated JWK should error with meaningful message",
    async () => {
      // This deserializes a keyless account derived from a JWT with a kid that is no longer valid.
      const account = await aptos.deriveKeylessAccount({
        jwt: TEST_FEDERATED_JWT_TOKENS[0],
        ephemeralKeyPair,
        jwkAddress: jwkAccount.accountAddress,
      });
      const recipient = Account.generate();

      // Now rotate the JWKs
      const jwkTransaction = await aptos.updateFederatedKeylessJwkSetTransaction({
        sender: jwkAccount,
        iss: "test.federated.oidc.provider",
        jwksUrl: "https://dev-qtdgjv22jh0v1k7g.us.auth0.com/.well-known/jwks.json",
      });
      const committedJwkTxn = await aptos.signAndSubmitTransaction({ signer: jwkAccount, transaction: jwkTransaction });
      await aptos.waitForTransaction({ transactionHash: committedJwkTxn.hash });

      await expect(simpleCoinTransactionHelper(aptos, account, recipient)).rejects.toThrow(
        "JWK with kid 'test-rsa' for issuer 'test.federated.oidc.provider' not found",
      );
    },
    KEYLESS_TEST_TIMEOUT,
  );

  describe.each([
    { jwts: TEST_JWT_TOKENS, jwkAddress: undefined },
    { jwts: TEST_FEDERATED_JWT_TOKENS, jwkAddress: jwkAccount.accountAddress },
  ])("keyless account", ({ jwts, jwkAddress }) => {
    let i = 0;
    let jwt: string;
    beforeEach(async () => {
      jwt = jwts[i % jwts.length];
      i += 1;
    });

    test(
      "derives the keyless account and submits a transaction",
      async () => {
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, jwkAddress });
        const recipient = Account.generate();
        await simpleCoinTransactionHelper(aptos, sender, recipient);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "creates the keyless account via the static constructor and submits a transaction",
      async () => {
        const pepper = await aptos.getPepper({ jwt, ephemeralKeyPair });
        const proof = await aptos.getProof({ jwt, ephemeralKeyPair, pepper });

        const account =
          jwkAddress === undefined
            ? KeylessAccount.create({ proof, jwt, ephemeralKeyPair, pepper })
            : FederatedKeylessAccount.create({ proof, jwt, ephemeralKeyPair, pepper, jwkAddress });
        const recipient = Account.generate();
        await simpleCoinTransactionHelper(aptos, account, recipient);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "derives the keyless account with email uidKey and submits a transaction",
      async () => {
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, uidKey: "email" })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, jwkAddress, uidKey: "email" });
        const recipient = Account.generate();
        await simpleCoinTransactionHelper(aptos, sender, recipient);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "derives the keyless account with custom pepper and submits a transaction",
      async () => {
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, pepper: new Uint8Array(31) })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, jwkAddress, pepper: new Uint8Array(31) });
        const recipient = Account.generate();
        await simpleCoinTransactionHelper(aptos, sender, recipient);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "deriving keyless account with async proof fetch executes callback",
      async () => {
        let succeeded = false;
        const proofFetchCallback = async (res: ProofFetchStatus) => {
          if (res.status === "Failed") {
            return;
          }
          succeeded = true;
        };
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, proofFetchCallback })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, proofFetchCallback, jwkAddress });
        expect(succeeded).toBeFalsy();
        await sender.waitForProofFetch();
        expect(succeeded).toBeTruthy();
        const recipient = Account.generate();
        await simpleCoinTransactionHelper(aptos, sender, recipient);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "derives the keyless account with async proof fetch and submits a transaction",
      async () => {
        const proofFetchCallback = async () => {};
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, proofFetchCallback })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, proofFetchCallback, jwkAddress });
        await aptos.fundAccount({
          accountAddress: sender.accountAddress,
          amount: FUND_AMOUNT,
        });
        const transaction = await aptos.transferCoinTransaction({
          sender: sender.accountAddress,
          recipient: sender.accountAddress,
          amount: TRANSFER_AMOUNT,
        });
        const pendingTxn = await aptos.signAndSubmitTransaction({ signer: sender, transaction });
        await aptos.waitForTransaction({ transactionHash: pendingTxn.hash });
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "deriving keyless account with async proof fetch throws when trying to immediately sign",
      async () => {
        const proofFetchCallback = async () => {};
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, proofFetchCallback })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, proofFetchCallback, jwkAddress });
        await aptos.fundAccount({
          accountAddress: sender.accountAddress,
          amount: FUND_AMOUNT,
        });
        const transaction = await aptos.transferCoinTransaction({
          sender: sender.accountAddress,
          recipient: sender.accountAddress,
          amount: TRANSFER_AMOUNT,
        });
        expect(() => sender.signTransaction(transaction)).toThrow();
        await sender.waitForProofFetch();
        sender.signTransaction(transaction);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "deriving keyless account using all parameters",
      async () => {
        const proofFetchCallback = async () => {};

        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({
                jwt,
                ephemeralKeyPair,
                uidKey: "email",
                pepper: new Uint8Array(31),
                proofFetchCallback,
              })
            : await aptos.deriveKeylessAccount({
                jwt,
                ephemeralKeyPair,
                uidKey: "email",
                pepper: new Uint8Array(31),
                proofFetchCallback,
                jwkAddress,
              });
        const recipient = Account.generate();
        await simpleCoinTransactionHelper(aptos, sender, recipient);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "simulation works correctly",
      async () => {
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, jwkAddress });
        await aptos.fundAccount({
          accountAddress: sender.accountAddress,
          amount: FUND_AMOUNT,
        });
        const transaction = await aptos.transferCoinTransaction({
          sender: sender.accountAddress,
          recipient: sender.accountAddress,
          amount: TRANSFER_AMOUNT,
        });
        await aptos.transaction.simulate.simple({ signerPublicKey: sender.publicKey, transaction });
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "keyless account verifies signature for arbitrary message correctly",
      async () => {
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, jwkAddress });
        const message = "hello world";
        const signature = sender.sign(message);
        expect(sender.verifySignature({ message, signature })).toBe(true);
      },
      KEYLESS_TEST_TIMEOUT,
    );

    test(
      "serializes and deserializes",
      async () => {
        const sender =
          jwkAddress === undefined
            ? await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair })
            : await aptos.deriveKeylessAccount({ jwt, ephemeralKeyPair, jwkAddress });
        const bytes = sender.bcsToBytes();
        const deserializedAccount =
          jwkAddress === undefined ? KeylessAccount.fromBytes(bytes) : FederatedKeylessAccount.fromBytes(bytes);
        expect(bytes).toEqual(deserializedAccount.bcsToBytes());
      },
      KEYLESS_TEST_TIMEOUT,
    );
  });
});
